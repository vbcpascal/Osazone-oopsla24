module Meta.Monad.Env where

import Haskell.Control.Monad.State as HS

type Env r = HS.StateT [r]

[#monadic]
[#gentype "Monad m => Env r m r"]
getEnv ::?
getEnv =
  let envs = HS.get
  in  head envs

[#monadic]
[#gentype "Monad m => r -> Env r m ()"]
putEnv ::?
putEnv env =
  let envs = HS.get
  in  HS.put (env : envs)

[#monadic]
[#gentype "Monad m => Env r m ()"]
restoreEnv ::?
restoreEnv = 
  let envs = HS.get
  in  HS.put (tail envs)

[#pure]
[#gentype "Monad m => Env r m a -> r -> m a"]
evalEnv ::?
evalEnv s env = HS.evalStateT s [env]
