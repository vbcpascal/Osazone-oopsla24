module Meta.Monad.EnvStack where

import Haskell.Control.Monad.State as HS

type EnvStack r = HS.StateT [r]

[#monadic]
[#gentype "Monad m => EnvStack r m r"]
getEnv ::?
getEnv =
  let envs = HS.get
  in  head envs

[#monadic]
[#gentype "Monad m => r -> EnvStack r m ()"]
putEnv ::?
putEnv env =
  let envs = HS.get
  in  HS.put (env : tail envs)

[#monadic]
[#gentype "Monad m => EnvStack r m ()"]
local ::?
local =
  let envs = HS.get
      env = head envs
  in  HS.put (env : envs)

[#monadic]
[#gentype "Monad m => EnvStack r m ()"]
restore ::?
restore =
  let envs = HS.get
  in  HS.put (tail envs)

[#pure]
[#gentype "Monad m => EnvStack r m a -> r -> m a"]
evalEnvStack ::?
evalEnvStack s env = HS.evalStateT s [env]
