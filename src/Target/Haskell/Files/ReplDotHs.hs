{-# LANGUAGE QuasiQuotes #-}
module Target.Haskell.Files.ReplDotHs (replDotHsPath, replDotHs) where

import Text.RawString.QQ

replDotHsPath :: FilePath
replDotHsPath = "Repl.hs"

replDotHs :: String
replDotHs = [r|{-# LANGUAGE OverloadedStrings #-}
module Repl where

{- [ Generated by Osazone ]
 -
 - This is the Repl module, the commands of
 - interpreter are implemented here. They are
 - defined in `language.yaml`.
 -}

$imports$

import Data.Map
import Control.Exception
import Control.Monad.Trans.State
import System.IO (hFlush, stdout)
import Runtime
import Text.Read
import Lib.Meta.Monad.Trans

type Command = String
type Argument = String

-- The REPL Interpreter
repl :: IO ()
repl = do
  putStr "$name$> "
  hFlush stdout
  line <- getLine
  if line == "" then repl else do
    let (cmd:args) = words line
    let arg = unwords args
    case cmd of
      ":q"    -> return ()
      ":quit" -> return ()
      "--" -> repl
      _ -> do
        runCommand cmd arg
        repl

ll :: Identity a -> a
ll = runId

rr :: Monad m => Runtime m a -> m a
rr e = evalStateT e ([], 0)

runCommand :: Command -> Argument -> IO ()
$cmds$
runCommand _ _ = print "Unknown command or invalid arguments"

$runcmds$

handler :: ErrorInfo -> IO ()
handler e = putDoc (ap e)

|]
